leaflet(load.fire) %>% addPolygons()
summary(load.fire)
load.fire <- slot(load.fire, "polygons")
leaflet(load.fire) %>% addPolygons()
fixa <- lapply(fix, checkPolygonsHoles)
load.fire <- readShapePoly("firerds/FireRDs.shp")
proj4string(load.fire)=CRS("+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs")
load.fire <- spTransform(load.fire,CRS("+init=epsg:4326"))
slot(example, "polygons") <- lapply(slot(example, "polygons"), checkPolygonsHoles)
require(devtools)
install_github("eblondel/cleangeo")
require(cleangeo)
install.packages("cleangeo", lib="C:/util/R-3.3.1/library")
report <- clgeo_CollectionReport(load.fire)
report <- clgeo_CollectionReport(load.fire)
require(cleangeo)
report <- clgeo_CollectionReport(load.fire)
summary <- clgeo_SummaryReport(report)
issues <- report[report$valid == FALSE,]
nv <- clgeo_SuspiciousFeatures(report)
mysp <- sp[nv[-14],]
mysp <- load.fire[nv[-14],]
l
nv <- clgeo_SuspiciousFeatures(report)
View(issues)
mysp <- load.fire[nv[-439],]
mysp.clean <- clgeo_Clean(mysp, print.log = TRUE)
mysp.clean <- clgeo_Clean(mysp)
nv <- clgeo_SuspiciousFeatures(report)
mysp <- load.fire[nv[-439],]
mysp.clean <- clgeo_Clean(mysp)
load.fire <- maptools::readShapePoly("firerds/FireRDs.shp")
proj4string(load.fire)=CRS("+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs")
leaflet(load.fire) %>% addPolygons()
load.fire <- spTransform(load.fire,CRS("+init=epsg:4326"))
leaflet(load.fire) %>% addPolygons()
load.fire <- load.fire[nv[-3],]
leaflet(load.fire) %>% addPolygons()
load.fire <- load.fire@bbox
load.fire <- maptools::readShapePoly("firerds/FireRDs.shp")
proj4string(load.fire)=CRS("+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs")
load.fire <- spTransform(load.fire,CRS("+init=epsg:4326"))
fire <- spTransform(load.fire,CRS("+init=epsg:4326"))
View(issues)
shape[!is.na(shape@data$col) ,]
fire[!is.na(fire@data$col) ,]
fire[!is.na(fire@data) ,]
fire[!439,]
load.fire <- spTransform(load.fire,CRS("+init=epsg:4326"))
fire <- load.fire[!439,]
fire <- load.fire[!rowname(439),]
fire <- load.fire[!rownames(439),]
fire <- load.fire[,!439]
fire <- load.fire[,439]
fire <- load.fire[439,]
fire <- load.fire[1:438, 440:nrow(load.fire),]
fire <- load.fire[1:438, 440:839,]
fire <- load.fire[c(1:438, 440:849),]
leaflet(fire) %>% addPolygons()
leaflet(fire) %>% addPolygons(popup = ~Agency)
leaflet(fire) %>% addPolygons(popup = ~paste(Agency, Group))
leaflet(fire) %>% addPolygons(popup = ~paste(Agency, Group_))
.libPaths("C:/util")
require("httr")
scores <- GET("http://live.nhle.com/GameData/RegularSeasonScoreboardv3.jsonp")
q.scores <- GET("http://live.nhle.com/GameData/RegularSeasonScoreboardv3.jsonp")
scores <- content(q.scores)
q.scores
scores
scores <- q.scores$content
q.scores <- GET("http://www.espn.com/nhl/bottomline/scores")
q.scores$content
q.scores <- GET("http://www.espn.com/nhl/bottomline/scores")
q.scores <- fromJSON("http://www.espn.com/nhl/bottomline/scores")
require(jsonlite)
q.scores <- fromJSON("http://www.espn.com/nhl/bottomline/scores")
q.scores <- fromJSON("http://live.nhle.com/GameData/RegularSeasonScoreboardv3.jsonp")
j <- "http://live.nhle.com/GameData/RegularSeasonScoreboardv3.jsonp"
q.scores <- fromJSON(readLines(j), flatten = TRUE)$dokumentstatus
j <- "http://live.nhle.com/GameData/RegularSeasonScoreboardv3.jsonp"
readLines(j)
j <- readLines("http://live.nhle.com/GameData/RegularSeasonScoreboardv3.jsonp")
json <- gsub("loadScoreboard", "", j)
q.scores <- fromJSON(json, flatten = TRUE)$dokumentstatus
j <- readLines("http://live.nhle.com/GameData/RegularSeasonScoreboardv3.jsonp")
json <- gsub("loadScoreboard(", "", j)
json <- gsub("loadScoreboard(\", "", j)
json <- gsub("loadScoreboard\(", "", j)
j <- readLines("http://live.nhle.com/GameData/RegularSeasonScoreboardv3.jsonp")
json <- gsub("loadScoreboard\(", "", j)
json <- gsub("loadScoreboard(", "", j)
json <- gsub("loadScoreboard\\(", "", j)
json <- gsub("\\)", "", j)
q.scores <- fromJSON(json, flatten = TRUE)$dokumentstatus
j <- readLines("http://live.nhle.com/GameData/RegularSeasonScoreboardv3.jsonp")
json <- gsub("loadScoreboard\\(", "", j)
json <- gsub("\\)", "", json)
q.scores <- fromJSON(json, flatten = TRUE)$dokumentstatus
q.scores <- fromJSON(json)
scores <- content(q.scores)
scores <- q.scores$games
View(scores)
nhl <- readLines("http://live.nhle.com/GameData/RegularSeasonScoreboardv3.jsonp")
json <- gsub("loadScoreboard\\(", "", nhl)
json.nhl <- gsub("\\)", "", json.nhl)
nhl.scores <- fromJSON(json.nhl)
nhl.scores <- nhl.scores$games
json <- gsub("loadScoreboard\\(", "", nhl)
json.nhl <- gsub("loadScoreboard\\(", "", nhl)
json.nhl <- gsub("\\)", "", json.nhl)
nhl <- readLines("http://live.nhle.com/GameData/RegularSeasonScoreboardv3.jsonp")
json.nhl <- gsub("loadScoreboard\\(", "", nhl)
json.nhl <- gsub("\\)", "", json.nhl)
nhl.scores <- fromJSON(json.nhl)
nhl.scores <- nhl.scores$games
View(nhl.scores)
nfl <- fromJSON("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
nfl <- readLines("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
json.nfl <- fromJSON(nfl)
install.packages("ndjson", lib="C:/util/R-3.3.1/library")
require(ndjson)
nfl <- stream_in("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
View(nfl)
require(curl)
nfl.url <- curl("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
mydata <- jsonlite::stream_in(gzcon(nfl.url))
require(tidyjson)
install.packages("tidyjson", lib="C:/util/R-3.3.1/library")
require(tidyjson)
nfl.url <- "http://www.nfl.com/liveupdate/scorestrip/scorestrip.json"
read_json(nfl.url,format="jsonl")
readLines(nfl.url)
nfl <- readLines("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
nhl.scores <- fromJSON(nfl)
nhl.scores <- jsonlite::fromJSON(nfl)
nhl.scores <- fromJSON(nfl, auto_unbox=TRUE)
nhl.scores <- fromJSON(nfl, flatten = TRUE)
nfl.scores <- content(nfl, "text")
nfl <- GET("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
nfl.scores <- content(nfl, "text")
nfl.content <- content(nfl, "text")
nfl.content$content
nfl.content <- content(nfl, "text")
fromJSON(nfl.content)
nfl.content <- content(nfl, "json")
nfl.content <- content(nfl, "raw")
nfl.content <- content(nfl, "parse")
nfl <- GET("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
nfl.content <- content(nfl, "parse")
nfl.content <- content(nfl, "text")
json.nfl <- gsub(",,", ",NA,", nfl.content)
fromJSON(nfl.content)
nfl.content <- content(nfl, "text")
json.nfl <- gsub(",,", ",\NA\,", nfl.content)
fromJSON(nfl.content)
fromJSON(json.nfl)
nfl <- GET("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
nfl.content <- content(nfl, "text")
json.nfl <- gsub(",,", ",\NA\,", nfl.content)
json.nfl <- gsub(",,", ",\NA,\", nfl.content)
json.nfl <- gsub(",,", ",\NA,\\", nfl.content)
json.nfl <- gsub(",,", ",\\NA,\\", nfl.content)
fromJSON(json.nfl)
json.nfl <- gsub(",,", ",\\NA,\\", nfl.content)
json.nfl <- gsub(",,", "\\,NA,\\", nfl.content)
json.nfl <- gsub(",,", ",\\NA\,", nfl.content)
json.nfl <- gsub(",,", ",\\NA,\\", nfl.content)
nfl <- GET("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
nfl.content <- content(nfl, "text")
json.nfl <- gsub(",,", ",\\NA,\\", nfl.content)
json.nfl
json.nfl <- gsub(",,", ",NA,", nfl.content)
nfl.content <- content(nfl, "text")
json.nfl <- gsub(",,", ",NA,", nfl.content)
json.nfl <- gsub(",,", ",garbage,", nfl.content)
json.nfl <- gsub(",,", ",\\\\,", nfl.content)
fromJSON(json.nfl)
json.nfl <- gsub(",,", ",\\,\\", nfl.content)
fromJSON(json.nfl)
json.nfl <- gsub(",,", ",\\\,\\", nfl.content)
json.nfl <- gsub(",,", ",\\\\,\\", nfl.content)
json.nfl <- gsub(",,", ",\\,\\", nfl.content)
json.nfl <- gsub(",,", ",\\\\,\\", nfl.content)
json.nfl <- gsub(",,", ",\\\,\\", nfl.content)
json.nfl <- gsub(",,", ", \\,\\", nfl.content)
json.nfl <- gsub(",,", ", \\ ,\\", nfl.content)
json.nfl <- gsub(",,", ", \\\\ ,\\", nfl.content)
json.nfl <- gsub(",,", ', "" ,',  nfl.content)
fromJSON(json.nfl)
json.nfl
nfl.content <- content(nfl, "text")
fromJSON(nfl.content, force = TRUE)
mlb <- GET("http://gd2.mlb.com/components/game/mlb/year_2017/month_03/day_14/master_scoreboard.json")
fromJSON(mlb)
mlb <- readLines("http://gd2.mlb.com/components/game/mlb/year_2017/month_03/day_14/master_scoreboard.json")
fromJSON(mlb)
fromJSON(mlb)$content
mlb.scores <- fromJSON(mlb)
mlb.scores <- fromJSON(mlb)$games
mlb.scores <- fromJSON(mlb)
fromJSON(mlb)$data
mlb.scores <- fromJSON(mlb)$data$games$game
View(mlb.scores)
View(nhl.scores)
View(mlb.scores)
year <- as.numeric(format(Sys.Date(), "%Y"))
month <- as.numeric(format(Sys.Date(), "%M"))
month <- as.numeric(format(Sys.Date(), "%m"))
month <- ifelse(month < 10, paste0("0", month), month)
day <- as.numeric(format(Sys.Date(), "%d"))
day <- ifelse(day < 10, paste0("0", day), day)
mlb.url <- paste0("http://gd2.mlb.com/components/game/mlb/year_", year, "/month_", "/day_", day, "/master_scoreboard.json")
mlb <- readLines(mlb.url)
mlb.url <- paste0("http://gd2.mlb.com/components/game/mlb/year_", year, "/month_", month, "/day_", day, "/master_scoreboard.json")
mlb <- readLines(mlb.url)
View(mlb.scores)
nfl.content <- content(nfl, "text")
install.packages("XML", lib="C:/util/R-3.3.1/library")
require(XML)
nfl <- xmlParse("http://www.nfl.com/liveupdate/scorestrip/ss.xml")
xml_data <- xmlToList(nfl)
xml_data <- xmlToDataFrame(nfl)
View(xml_data)
nfl <- xmlParse("http://www.nfl.com/liveupdate/scorestrip/ss.xml")
nfl <- GET("http://www.nfl.com/liveupdate/scorestrip/ss.xml")
xml_data <- xmlToDataFrame(nfl)
xml_data <- xmlParse(nfl)
nfl.xml <- xmlParse(nfl)
nfl <- GET("http://www.nfl.com/liveupdate/scorestrip/ss.xml")
nfl$content
content(nfl, "xml")
content(nfl, "text")
nfl.xml <- content(nfl, "text")
xmlToDataFrame(nfl.xml)
xmlParse(nfl.xml)
nfl.c <- content(nfl, "text")
nfl.xml <- xmlParse(nfl.c)
nfl <- GET("http://www.nfl.com/liveupdate/scorestrip/ss.xml")
nfl.c <- content(nfl, "text")
xmlParse(nfl.c)
require(methods)
nfl <- GET("http://www.nfl.com/liveupdate/scorestrip/ss.xml")
nfl.c <- content(nfl, "text")
nfl.xml <- xmlParse(nfl.c)
nfl.xml <- xmlParse(nfl)
nfl.xml <- xmlRoot(nfl.c)
nfl.xml <- xmlRoot(nfl)
nfl.xml <- xmlRoot("http://www.nfl.com/liveupdate/scorestrip/ss.xml")
nfl <- xmlParse("http://www.nfl.com/liveupdate/scorestrip/ss.xml")
nfl <- GET("http://www.nfl.com/liveupdate/scorestrip/ss.xml")
nfl <- xmlTreeParse("http://www.nfl.com/liveupdate/scorestrip/ss.xml")
nfl.scores <- xmlToDataFrame(nfl)
nfl.scores <- xmlRoot(nfl)
nfl.scores <- xmlToDataFrame(xmlRoot(nfl))
nfl.scores <- xmlRoot(nfl)
require(plyr)
nfl.scores <- ldply(xmlToList(nfl), data.frame)
View(nfl.scores)
xmlToList(nfl)
xmlToDataFrame(nodes = getNodeSet(nfl, "//gms"))
xmlToDataFrame(nodes = getNodeSet(nfl, "//g"))
xmlToDF <- function(doc, xpath, isXML = TRUE, usewhich = TRUE, verbose = TRUE) {
if (!isXML)
doc = xmlParse(doc)
#### get the records for that form
nodeset <- getNodeSet(doc, xpath)
## get the field names
var.names <- lapply(nodeset, names)
## get the total fields that are in any record
fields = unique(unlist(var.names))
## extract the values from all fields
dl = lapply(fields, function(x) {
if (verbose)
print(paste0("  ", x))
xpathSApply(proc, paste0(xpath, "/", x), xmlValue)
})
## make logical matrix whether each record had that field
name.mat = t(sapply(var.names, function(x) fields %in% x))
df = data.frame(matrix(NA, nrow = nrow(name.mat), ncol = ncol(name.mat)))
names(df) = fields
## fill in that data.frame
for (icol in 1:ncol(name.mat)) {
rep.rows = name.mat[, icol]
if (usewhich)
rep.rows = which(rep.rows)
df[rep.rows, icol] = dl[[icol]]
}
return(df)
}
xmlToDF(nfl)
roman <- xmlSApply(nfl, function(x) xmlSApply(x, xmlValue))
View(roman)
root.nfl <- xmlRoot(nfl)
nfl.scores <- xmlSApply(rootnfl, function(x) xmlSApply(x, xmlValue))
nfl.scores <- xmlSApply(root.nfl, function(x) xmlSApply(x, xmlValue))
View(nfl.scores)
nfl <- xmlTreeParse("http://www.nfl.com/liveupdate/scorestrip/ss.xml")
root.nfl <- xmlRoot(nfl)
nfl.scores <- xmlSApply(root.nfl, function(x) xmlSApply(x, xmlValue))
nfl <- xmlTreeParse("http://www.nfl.com/liveupdate/scorestrip/ss.xml")
root.nfl <- xmlRoot(nfl)
nfl.df <- xmlSApply(root.nfl, function(x) xmlSApply(x, xmlValue))
nfl.scores <- data.frame(t(nfl.df),row.names=NULL)
View(nfl.scores)
root.nfl <- xmlRoot(nfl)
nfl
root.nfl <- xmlRoot(nfl)$ss
nfl$doc$file
nfl$dtd
nfl$doc$file$gms
nfl$doc$file$list
nfl$doc$file
nfl$gms
nfl$doc$file$gms
root.nfl <- xmlRoot(nfl)
root.nfl$gms
root.nfl
root.nfl$ss
root.nfl$gms
root.nfl
xmlToDataFrame(root.nfl)
require(methods)
xmlToDataFrame(root.nfl)
nfl <- xmlTreeParse("http://www.nfl.com/liveupdate/scorestrip/ss.xml", useInternalNodes = TRUE)
root.nfl <- xmlRoot(nfl)
nfl <- xmlTreeParse("http://www.nfl.com/liveupdate/scorestrip/ss.xml", useInternalNodes = TRUE)
nfl <- xmlTreeParse("http://www.nfl.com/liveupdate/scorestrip/ss.xml", useInternalNodes = TRUE)
root.nfl <- xmlRoot(nfl)
xmlToDataFrame(root.nfl)
nfl <- xmlTreeParse("http://www.nfl.com/liveupdate/scorestrip/ss.xml", useInternalNodes = FALSE)
nfl <- readLines("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
json.nfl <- gsub(",,", ',""', nfl)
fromJSON(json.nfl)
nfl <- readLines("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
nfl
json.nfl
nfl <- readLines("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
json.nfl <- gsub(",,", ',"",', nfl)
fromJSON(json.nfl)
json.nfl
json.nfl <- gsub(",,", ',"",', json.nfl)
json.nfl
fromJSON(json.nfl)
nfl.scores <- fromJSON(json.nfl)
nfl.scores <- fromJSON(json.nfl)$ss
View(nfl.scores)
nfl.scores <- as.data.frame(fromJSON(json.nfl)$ss)
View(nfl.scores)
as.date(nfl.scores$V11)
as.Date(nfl.scores$V11)
nfl <- readLines("http://www.nfl.com/liveupdate/scorestrip/post/season/scorestrip.json")
nfl <- readLines("http://www.nfl.com/liveupdate/scorestrip/postseason/scorestrip.json")
json.nfl <- gsub(",,", ',"",', nfl)
json.nfl <- gsub(",,", ',"",', json.nfl)
nfl.scores <- as.data.frame(fromJSON(json.nfl)$ss)
View(nfl.df)
View(nhl.scores)
View(nfl.scores)
nhl.url <- paste0("http://live.nhle.com/GameData/GCScoreboard/", year, "-", month, "-", day, ".jsonp")
nhl <- readLines(nhl.url)
json.nhl <- gsub("loadScoreboard\\(", "", nhl)
json.nhl <- gsub("\\)", "", json.nhl)
nhl.scores <- fromJSON(json.nhl)
nhl.scores <- nhl.scores$games
View(nhl.scores)
nhl.url <- paste0("http://live.nhle.com/GameData/GCScoreboard/", year, "-", month, "-", 13, ".jsonp")
nhl <- readLines(nhl.url)
json.nhl <- gsub("loadScoreboard\\(", "", nhl)
json.nhl <- gsub("\\)", "", json.nhl)
nhl.scores <- fromJSON(json.nhl)
nhl.scores <- nhl.scores$games
View(nhl.scores)
nfl.post <- readLines("http://www.nfl.com/liveupdate/scorestrip/postseason/scorestrip.json")
nfl <- readLines("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
nfl.pre <- readLines("http://www.nfl.com/liveupdate/scorestrip/preseason/scorestrip.json")
Sys.Date() < as.Date(paste0(year,"08-01"))
paste0(year,"08-01")
Sys.Date() < as.Date(paste0(year,"-08-01"))
Sys.Date() > as.Date(paste0(year,"-08-01"))
Sys.Date() > as.Date(paste0(year,"-01-01")
)
Sys.Date() < as.Date(paste0(year,"-08-01"))
nfl.scores <- as.data.frame(fromJSON(json.nfl)$ss)
View(nfl.scores)
nfl <- readLines("http://www.nfl.com/liveupdate/scorestrip/scorestrip.json")
json.nfl <- gsub(",,", ',"",', nfl)
json.nfl <- gsub(",,", ',"",', json.nfl)
1nfl.scores <- as.data.frame(fromJSON(json.nfl)$ss)
nfl.scores1 <- as.data.frame(fromJSON(json.nfl)$ss)
View(nfl.scores1)
nfl <- readLines("http://www.nfl.com/liveupdate/scorestrip/postseason/scorestrip.json")
json.nfl <- gsub(",,", ',"",', nfl)
json.nfl <- gsub(",,", ',"",', json.nfl)
nfl.scores <- as.data.frame(fromJSON(json.nfl)$ss)
pit <- nfl.scores[apply(nfl.scores, 1, function(row){any(grepl("Pit", row, ignore.case = TRUE))}), ]
View(pit)
score <- pit[nrow(pit),]
View(pit)
View(score)
recent.score <- pit[nrow(pit),]
library(RCurl)
library(rjson)
library(plyr)
library(reshape)
library(RGoogleAnalytics)
library(lubridate)
library(zoo)
library(lubridate)
library(reshape)
client.id <- "697348603333-35uj3s2a6oilhoobf4c6s2mt12mhn9hn.apps.googleusercontent.com"
client.secret <- "FfIw5XEQh4FmTs7PKIJ-x8EZ"
token <- Auth(client.id, client.secret)
ValidateToken(token)
today <- as.character(format(Sys.time(),"%Y-%m-%d"))
last.year <- Sys.Date() - 365
last.year <- as.character(format(last.year, "%Y-%m-%d"))
two.years <- Sys.Date() - (365*2)
two.years <- as.character(format(two.years, "%Y-%m-%d"))
this_year <- as.Date(format(Sys.Date(), format="%Y-01-01"))
city_q <- Init(start.date = format(this_year-365.25, "%Y-%m-%d"),
end.date = format(Sys.Date(), "%Y-%m-%d"),
dimensions = "ga:date",
metrics = "ga:visits, ga:avgSessionDuration, ga:bounceRate, ga:newUsers",
sort = "ga:date, -ga:visits",
max.results = 10000,
table.id = "ga:24804532")
load.city <- GetReportData(QueryBuilder(city_q), token, paginate_query = FALSE)
load.city$date <- as.Date(load.city$date, "%Y%m%d")
city_cur <- subset(load.city, date >= this_year)
city_hist <- subset(load.city, date < this_year)
View(load.city)
require(sp)
require(rgdal)
require(maptools)
require(readxl)
require(httr)
# Load City Parcels
parcels <- readOGR("parcel_boundaries/allegheny_county_parcel_boundaries.shp")
parcels <- spTransform(parcels, CRS("+init=epsg:4326"))
r <- GET('https://cgweb06.cartegraphoms.com/PittsburghPA/api/v1/classes/cgTasksClass?filter=([Activity]%20contains%20"Board-up")', authenticate('APIAdmin', 'cartegraph1', type = "basic"))
c <- content(r, as = "text")
boardups <- jsonlite::fromJSON(c)[["cgTasksClass"]]
Lng <- boardups$CgShape$Center$Lng
Lat <- boardups$CgShape$Center$Lat
pts <- cbind(Lng, Lat)
boardups <- boardups[,c("ActivityField", "StartDateActualField", "StopDateActualField", "LocatorAddressNumberField", "LocatorStreetField", "StatusField")]
boardups$StartDateActualField <- as.Date(boardups$StartDateActualField)
boardups$StopDateActualField <- as.Date(boardups$StopDateActualField)
boardups <- cbind (boardups, pts)
boardups <- subset(boardups, !is.na(Lat) | !is.na(Lng) & StatusField == "Completed")
# Spatial Object
pts <- cbind(boardups$Lng, boardups$Lat)
boardups.pt <- SpatialPointsDataFrame(pts, boardups, proj4string = CRS("+init=epsg:4326"))
# Condemned Building Info
# Load and Clean
condemned <- read_xlsx("DEMO DATA 9-29-2016 - Copy.xlsx", sheet = "Condemned")
condemned_dates <- read_xlsx("DEMO DATA 9-29-2016 - Copy.xlsx", sheet = "Condemned", col_types = "date")
condemned$`Condemned Date` <- condemned_dates$`Condemned Date`
demod_dates <- read_xlsx("DEMO DATA 9-29-2016 - Copy.xlsx", sheet = "Completed", col_types = "date")
demod <- read_xlsx("DEMO DATA 9-29-2016 - Copy.xlsx", sheet = "Completed", col_types = "guess")
demod$`Date Razed` <- demod_dates$`Date Razed`
demod$`Submitted for Payment` <- demod_dates$`Submitted for Payment`
# Merge Demod and Condemned
sub_c <- subset(condemned, !is.na(`Lot & Block`), select = c("Lot & Block", "Condemned Date"))
sub_c$`Date Razed` <- NA
colnames(sub_c) <- c("mapblocklo", "start", "end")
sub_d <- subset(demod, !is.na(`Lot & Block`), select = c("Lot & Block", "Condemned Date", "Date Razed"))
colnames(sub_d) <- c("mapblocklo", "start", "end")
cond_final <- rbind(sub_d, sub_c)
# Load Fire Incidents
fires <- read.csv("Fire_Incidents.csv")
# Clean Fires
# Clean Dates
fires$date <- as.character(fires$date)
fires$date <- as.POSIXct(fires$date)
# Clean Call Type
fires$CALL_TYPE_FINAL_D <- as.character(fires$CALL_TYPE_FINAL_D)
fires$CALL_TYPE_FINAL_D <- trimws(fires$CALL_TYPE_FINAL_D)
fires$CALL_TYPE_FINAL_D <- as.factor(fires$CALL_TYPE_FINAL_D)
# Remove non-geocoded
fires <- subset(fires, !is.na(XCOORD) | !is.na(YCOORD))
coords <- cbind(fires$XCOORD, fires$YCOORD)
fires_sp <- SpatialPoints(coords)
# Form Spatial Data Frame
fires_spdf <- SpatialPointsDataFrame(fires_sp, fires)
proj4string(fires_spdf) <- CRS("+init=epsg:4326")
over_df <- sp::over(fires_spdf, parcels)
fires_final <- cbind(fires, over_df)
v.parcels <- parcels[parcels$mapblocklo %in% cond_final$mapblocklo,]
v.parcels@data$color_val <- ifelse(v.parcels$mapblocklo %in% sub_d$mapblocklo, "#8c510a", "#01665e")
leaflet(v.parcels) %>%
addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
addPolygons(color = ~color_val) %>%
addLegend("bottomright", colors = c("#8c510a", "#01665e"), labels = c("Demolished", "Condemned"))
require(leaflet)
v.parcels <- parcels[parcels$mapblocklo %in% cond_final$mapblocklo,]
v.parcels@data$color_val <- ifelse(v.parcels$mapblocklo %in% sub_d$mapblocklo, "#8c510a", "#01665e")
leaflet(v.parcels) %>%
addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
addPolygons(color = ~color_val) %>%
addLegend("bottomright", colors = c("#8c510a", "#01665e"), labels = c("Demolished", "Condemned"))
.libPaths("C:/util/R/library")
knit_with_parameters('C:/Users/arnoldg/Documents/R Folder/Fires at Condemned/Fires_Condemned_Prez.Rmd')
unlink('C:/Users/arnoldg/Documents/R Folder/Fires at Condemned/Fires_Condemned_Prez_cache', recursive = TRUE)
remove.packages("rmarkdown")
Sys.setenv("R_LIBS_USER" = ""C:/util/R/library")
Sys.setenv("R_LIBS_USER" = ""C:/util/R/library/")
Sys.setenv("R_LIBS_USER" = "C:/util/R/library/")
install.packages("sp")
install.packages("sp", lib="C:/util/R-3.4.2/library")
setwd("C:/Users/arnoldg/Documents/GitHub")
shiny::runApp('fire_risk_analysis/FireRisk_Dashboard')
